package application;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

public class PriorityQueue<T> {

    private List<T> heap;
    private Comparator<T> comparator;

    public PriorityQueue(Comparator<T> comparator) {
        this.heap = new ArrayList<>();
        this.comparator = comparator;
    }

    public void offer(T element) {
        heap.add(element);
        bubbleUp(heap.size() - 1);
    }

    public T poll() {
        if (isEmpty()) {
            throw new IllegalStateException("Priority queue is empty");
        }

        T result = heap.get(0);
        T lastElement = heap.remove(heap.size() - 1);

        if (!isEmpty()) {
            heap.set(0, lastElement);
            bubbleDown(0);
        }

        return result;
    }

    public T peek() {
        if (isEmpty()) {
            throw new IllegalStateException("Priority queue is empty");
        }
        return heap.get(0);
    }

    public boolean isEmpty() {
        return heap.isEmpty();
    }

    private void bubbleUp(int index) {
        while (index > 0) {
            int parentIndex = (index - 1) / 2;
            if (compare(heap.get(index), heap.get(parentIndex)) < 0) {
                swap(index, parentIndex);
                index = parentIndex;
            } else {
                break;
            }
        }
    }

    private void bubbleDown(int index) {
        while (index < heap.size() / 2) {
            int leftChildIndex = 2 * index + 1;
            int rightChildIndex = 2 * index + 2;
            int minIndex = leftChildIndex;

            if (rightChildIndex < heap.size() && compare(heap.get(rightChildIndex), heap.get(leftChildIndex)) < 0) {
                minIndex = rightChildIndex;
            }

            if (compare(heap.get(minIndex), heap.get(index)) < 0) {
                swap(index, minIndex);
                index = minIndex;
            } else {
                break;
            }
        }
    }

    private void swap(int i, int j) {
        T temp = heap.get(i);
        heap.set(i, heap.get(j));
        heap.set(j, temp);
    }

    private int compare(T a, T b) {
        if (comparator != null) {
            return comparator.compare(a, b);
        } else {
            @SuppressWarnings("unchecked")
            Comparable<? super T> key = (Comparable<? super T>) a;
            return key.compareTo(b);
        }
    }
}
